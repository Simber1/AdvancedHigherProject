package uk.org.kelsohighschool.ps.program.stuff;

import java.util.ArrayList;
import java.util.Collections;

//my stuff
import uk.org.kelsohighschool.ps.program.db.Co2;

public class Sort {
	/**
	 * ArrayList to sort 
	 */
	private ArrayList<Co2> List1;
	/**
	 * string to store the sort type
	 */
	private String sorttype;
	
	/**
	 * Sorts in different ways by passing values on to other functions
	 * @param ListIn ArrayList to be sorted
	 * @param sorttype The way list needs to be sorted, Possible values, new, big, small and other (default)
	 * @return The sorted list
	 */
	public ArrayList<Co2> MySort(ArrayList<Co2> ListIn,String sorttype){
		ArrayList<Co2> ListOut;
		
		if (sorttype.equals("new")){
			ListOut = sortnew(ListIn);
			return ListOut;
		}
		if (sorttype.equals("big")){
			ListOut = sortbig(ListIn);
			return ListOut;
		}
		if (sorttype.equals("small")){
			ListOut = sortsmall(ListIn);
			return ListOut;
		}
		else {
			ListOut = sortold(ListIn);
			return ListOut;
		}
		
	}

	
	/**
	 * Sorts the list oldest to newest
	 * @param ListSorted The list to be sorted
	 * @return The List sorted oldest to newest
	 */
	public ArrayList<Co2> sortold(ArrayList<Co2> ListSorted){ 
		for(Integer out = ListSorted.size()-1; out>1; out--) {
			for(Integer i = 0; i < out;i ++){
				int n = i+1;
				Co2 resulti = ListSorted.get(i);
				Co2 resultn = ListSorted.get(n);
		        	if(resulti.getTime() > resultn.getTime()) {
		        		Co2 temp = ListSorted.get(i);
		                ListSorted.set(i, ListSorted.get(n));
		                ListSorted.set(n, temp);
		            }
		        }
		    }
		return ListSorted;
	}
	
	
	/**
	 * Runs the Oldest to Newest sort then reverses it
	 * @param ListSorted The list to be sorted
	 * @return The List sorted newest to oldest
	 */
	public ArrayList<Co2> sortnew(ArrayList<Co2> ListSorted){ 
		ListSorted = sortold(ListSorted);
		Collections.reverse(ListSorted);
		return ListSorted;
	}
	
	
	
	/**
	 * Runs the Lowest to Highest sort then reverses it
	 * @param ListSorted The list to be sorted
	 * @return The List sorted Highest to Lowest
	 */
	public ArrayList<Co2> sortbig(ArrayList<Co2> ListSorted){ 
		ListSorted = sortsmall(ListSorted);
		Collections.reverse(ListSorted);
		return ListSorted;

	}
	
	
	/**
	 * Sorts the list Lowest to Highest
	 * @param ListSorted The list to be sorted
	 * @return The List sorted Lowest to Highest
	 */
	public ArrayList<Co2> sortsmall(ArrayList<Co2> ListSorted){ 
		for(Integer out = ListSorted.size()-1; out>1; out--) {
			for(Integer i = 0; i < out;i ++){
				int n = i+1;
				Co2 resulti = ListSorted.get(i);
				Co2 resultn = ListSorted.get(n);
		        	if(resulti.getCo2_reading() > resultn.getCo2_reading()) {
		        		Co2 temp = ListSorted.get(i);
		                ListSorted.set(i, ListSorted.get(n));
		                ListSorted.set(n, temp);
		            }
		        }
		    }
		return ListSorted;
	}
	
	
	/**
	 * Autogenerated getter
	 * @return List1 
	 */
	public ArrayList<Co2> getList1() {
		return List1;
	}

	/**
	 * Autogenerated setter
	 * @param list1 list to set list1 to
	 */
	public void setList1(ArrayList<Co2> list1) {
		List1 = list1;
	}

	/**
	 * Autogenerated getter
	 * @return sorttype
	 */
	public String getSorttype() {
		return sorttype;
	}

	/**
	 * Autogenerated setter
	 * @param sorttype string to set sorttype to
	 */
	public void setSorttype(String sorttype) {
		this.sorttype = sorttype;
	}
}
